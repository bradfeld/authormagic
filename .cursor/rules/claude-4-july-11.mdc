---
description: "Next.js + Supabase + Clerk + Vercel specific patterns and best practices"
globs: ["**/*.{ts,tsx,js,jsx}", "**/*.json", "**/*.md"]
alwaysApply: true
---

# Tech Stack Implementation Patterns

## Supabase + Clerk Integration

### Authentication Flow
- Always create Supabase JWT template in Clerk Dashboard with HS256 signing
- Use Row Level Security policies referencing `auth.uid()` from Clerk JWT
- Handle auth state changes with proper loading states and error boundaries
- Never mix Supabase Auth with Clerk - use Clerk as the primary auth provider

### Database Operations
- Use `@supabase/ssr` for all server-side operations
- Create typed database schema with `supabase gen types typescript`
- Store database types in `/lib/database.types.ts`
- Implement RLS policies that reference Clerk user IDs via JWT claims

### Data Synchronization
- Sync Clerk user data to Supabase profiles table on sign-up/update
- Use Clerk webhooks for real-time user data synchronization
- Handle edge cases where Clerk user exists but Supabase profile doesn't

## Next.js App Router Patterns

### Component Architecture
- Use Server Components by default - only add `'use client'` when necessary
- Server Components for: data fetching, static content, SEO-critical pages
- Client Components for: interactivity, state management, browser APIs
- Prefer server actions over API routes for form submissions

### File Organization
- Server actions in `/lib/actions/[domain].ts`
- Database utilities in `/lib/supabase/`
- Reusable UI components in `/components/ui/`
- Feature-specific components in `/components/[feature]/`
- Type definitions in `/lib/types/` or co-located with features

### Performance Optimization
- Use `loading.tsx` for route-level loading states
- Implement proper `error.tsx` boundaries for each route segment
- Leverage Next.js caching with `revalidateTag()` and `revalidatePath()`
- Use `Suspense` boundaries for component-level loading

## Vercel Deployment Considerations

### Environment Variables
- Use `NEXT_PUBLIC_` prefix only for client-side variables
- Store sensitive keys (Supabase service key, Clerk secret) as server-only
- Configure environment variables in Vercel dashboard for each environment
- Use `.env.local` for development, never commit `.env` files

### Edge Runtime Optimization
- Use Edge Runtime for API routes that don't require Node.js APIs
- Consider Edge for middleware and simple data transformations
- Stick to Node.js runtime for complex database operations or file processing

### Error Handling
- Implement custom 404 and 500 error pages
- Use proper HTTP status codes in API responses
- Log errors to external service (Sentry, LogRocket) for production monitoring
- Graceful degradation for non-critical features

## Code Quality Standards

### TypeScript Configuration
- Use strict mode with `"strict": true`
- Enable `"noUncheckedIndexedAccess": true` for safer array/object access
- Define interfaces for all external API responses
- Use generic types for reusable components and utilities

### Error Handling Patterns
- Use Result/Either pattern for operations that can fail
- Implement error boundaries at appropriate component levels
- Validate user inputs with libraries like Zod
- Handle async operations with proper try/catch blocks

### State Management
- Use React's built-in state for component-level state
- Consider Zustand for complex client-side state management
- Use server state libraries (TanStack Query) for server data caching
- Avoid prop drilling - use context or state management for deep hierarchies

## Security Best Practices

### Authentication & Authorization
- Always validate user permissions on the server side
- Use Clerk's role-based access control (RBAC) when available
- Implement proper session management with secure cookies
- Validate JWT tokens on API routes that require authentication

### Data Protection
- Sanitize user inputs before database operations
- Use prepared statements (Supabase handles this automatically)
- Implement rate limiting for public API endpoints
- Never expose sensitive data in client-side code or logs

### CORS & CSP
- Configure proper CORS policies for API routes
- Implement Content Security Policy headers
- Use HTTPS everywhere in production
- Validate origin headers for sensitive operations

## Development Workflow

### Testing Strategy
- Write unit tests for utility functions and business logic
- Use integration tests for API routes and database operations
- Implement E2E tests for critical user flows
- Test authentication flows thoroughly across different scenarios

### Code Review Standards
- Review for proper error handling and edge cases
- Ensure TypeScript types are properly defined
- Check for potential security vulnerabilities
- Verify performance implications of new features

### Documentation Requirements
- Document complex business logic and algorithms
- Maintain README.md with setup and deployment instructions
- Document API endpoints with clear request/response examples
- Keep environment variable documentation up to date